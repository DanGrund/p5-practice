let sound;
let bassDrops = [];
preload = () => {
  sound = loadSound('assets/flyLikeLove.mp3');
}

setup = () => {
  let canvas = createCanvas(displayWidth, .8*displayHeight);
  canvas.mouseClicked(togglePlay);
  fft = new p5.FFT();
  sound.amp(0.2);
}

draw = () => {
  clear();
  background(0);

  let spectrum = fft.analyze();
  // noStroke();
  // fill(0,255,0); // spectrum is green
  // for (let i = 0; i < spectrum.length; i++){
  //   let x = map(i, 0, spectrum.length, 0, width*2);
  //   let h = -height + map(spectrum[i], 0, 255, height, 0);
  //   rect(x, height, width / spectrum.length, h )
  // }

  // let waveform = fft.waveform();
  // noFill();
  // beginShape();
  // stroke(255,0,0); // waveform is red
  // strokeWeight(1);
  // for (let i = 0; i< waveform.length; i++){
  //   let x = map(i, 0, waveform.length, 0, width);
  //   let y = map( waveform[i], -1, 1, 0, height);
  //   vertex(x,y);
  // }
  // endShape();

  // get energy "lowMid", "mid", "highMid", "treble"
  let bass = fft.getEnergy('bass')
  let lows = fft.getEnergy('lowMid')
  let mids = fft.getEnergy('mid')
  let upperMids = fft.getEnergy('highMid')
  let treble = fft.getEnergy('treble')

  console.log(mids)
  //bars for the five major 'energies'
  fill('rgba(255,43,56, 0.7)');
  rect(0, displayHeight, displayWidth/5, -(displayHeight/255)*bass);
  fill('rgba(185,43,56, 0.8)');
  rect(displayWidth/5, displayHeight, (displayWidth/5), -(displayHeight/255)*lows);
  fill('rgba(135,43,56, 0.8)');
  rect((displayWidth/5)*2, displayHeight, (displayWidth/5), -(displayHeight/255)*mids);
  fill('rgba(95,43,56, 0.8)');
  rect((displayWidth/5)*3, displayHeight, (displayWidth/5), -(displayHeight/255)*upperMids);
  fill('rgba(45,43,56, 0.8)');
  rect((displayWidth/5)*4, displayHeight, (displayWidth/5), -(displayHeight/255)*treble);

  //lets shoot some circles across the screen generated by bass clipping
  if(mids>180){
    createBassDrop();
  }

  for(let i=0; i<bassDrops.length; i++) {
    let drop = bassDrops[i]
    fill(0,255,0)
    ellipse(drop.x, drop.y, drop.width, drop.height)
    bassDrops[i].x += 10;
  }




}

togglePlay = () => {
  if (sound.isPlaying()) {
    sound.pause();
  } else {
    sound.loop();
  }
}

class BassDrop {
  constructor(x, y, width, height) {
    this.x = x
    this.y = y
    this.width = width
    this.height = height
  }
}

createBassDrop = () => {
  let drop = new BassDrop(0, displayHeight/2, 30, 30)
  bassDrops.push(drop)
}
